/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/application_secrets": {
    get: operations["applicationSecrets.read"];
    post: operations["applicationSecrets.create"];
  };
  "/api/v1/application_secrets/{application_secret_token}": {
    put: operations["applicationSecrets.update"];
    delete: operations["applicationSecrets.delete"];
  };
  "/api/v1/applications": {
    get: operations["applications.list"];
    /** An application emit events that are consumed by customers through webhooks */
    post: operations["applications.create"];
  };
  "/api/v1/applications/{application_id}": {
    /** An application emit events that are consumed by customers through webhooks */
    get: operations["applications.get"];
    /** Change the name of an application */
    put: operations["applications.update"];
    /** Delete an application, further events won't be sent, active webhook subscriptions will also be deleted. */
    delete: operations["applications.delete"];
  };
  "/api/v1/errors": {
    /** List of every possible errors that Hook0 can return. Each error is in RFC7807 problem format. */
    get: operations["errors.list"];
  };
  "/api/v1/event": {
    post: operations["events.ingest"];
  };
  "/api/v1/event_types": {
    get: operations["eventTypes.list"];
    post: operations["eventTypes.create"];
  };
  "/api/v1/event_types/{event_type_name}": {
    get: operations["eventTypes.get"];
    delete: operations["eventTypes.delete"];
  };
  "/api/v1/events": {
    get: operations["events.list"];
  };
  "/api/v1/events/{event_id}": {
    get: operations["events.get"];
  };
  "/api/v1/instance": {
    /** Get an object that shows how this instance is configured. */
    get: operations["instance.get"];
  };
  "/api/v1/organizations": {
    get: operations["organizations.list"];
  };
  "/api/v1/register": {
    post: operations["register"];
  };
  "/api/v1/request_attempts": {
    get: operations["requestAttempts.read"];
  };
  "/api/v1/responses/{response_id}": {
    /** A response is produced when a request attempt is processed */
    get: operations["response.get"];
  };
  "/api/v1/subscriptions": {
    /** List all subscriptions created by customers against the application events */
    get: operations["subscriptions.list"];
    /** A subscription let your customers subscribe to events. Events will be sent through the defined medium inside the subscription (e.g. HTTP POST request) as a webhook. */
    post: operations["subscriptions.create"];
  };
  "/api/v1/subscriptions/{subscription_id}": {
    put: operations["subscriptions.update"];
    delete: operations["subscriptions.delete"];
  };
}

export interface definitions {
  Application: {
    application_id: string;
    name: string;
    organization_id: string;
  };
  ApplicationPost: {
    name: string;
    organization_id: string;
  };
  ApplicationSecret: {
    created_at: string;
    deleted_at?: string;
    name?: string;
    token: string;
  };
  ApplicationSecretPost: {
    application_id: string;
    name?: string;
  };
  Event: {
    application_secret_token: string;
    event_id: string;
    event_type_name: string;
    ip: string;
    labels: unknown;
    metadata?: unknown;
    occurred_at: string;
    payload_content_type_name: string;
    received_at: string;
  };
  EventPost: {
    application_id: string;
    event_id: string;
    event_type: string;
    labels: unknown;
    metadata?: unknown;
    occurred_at: string;
    payload: string;
    payload_content_type: string;
  };
  EventType: {
    event_type_name: string;
    resource_type_name: string;
    service_name: string;
    verb_name: string;
  };
  EventTypePost: {
    application_id: string;
    resource_type: string;
    service: string;
    verb: string;
  };
  EventWithPayload: {
    application_secret_token: string;
    event_id: string;
    event_type_name: string;
    ip: string;
    labels: unknown;
    metadata?: unknown;
    occurred_at: string;
    payload: string;
    payload_content_type_name: string;
    received_at: string;
  };
  IngestedEvent: {
    application_id: string;
    event_id: string;
    received_at: string;
  };
  InstanceConfig: {
    auto_db_migration: boolean;
    disable_registration: boolean;
    keycloak_client_id: string;
    keycloak_realm: string;
    keycloak_url: string;
  };
  Organization: {
    name: string;
    organization_id: string;
    role: string;
  };
  Problem: {
    detail: string;
    id: string;
    status: number;
    title: string;
  };
  Registration: {
    organization_id: string;
    temporary_password: string;
    user_id: string;
  };
  RegistrationPost: {
    email: string;
    first_name: string;
    last_name: string;
    organization_name: string;
  };
  RequestAttempt: {
    created_at: string;
    delay_until?: string;
    event_id: string;
    failed_at?: string;
    picked_at?: string;
    request_attempt_id: string;
    response_id?: string;
    retry_count: number;
    status: string;
    subscription: {
      description?: string;
      subscription_id: string;
    };
    succeeded_at?: string;
  };
  Response: {
    body?: string;
    elapsed_time_ms?: number;
    headers?: { [key: string]: string };
    http_code?: number;
    response_error_name?: string;
    response_id: string;
  };
  Subscription: {
    created_at: string;
    description?: string;
    event_types: string[];
    is_enabled: boolean;
    label_key: string;
    label_value: string;
    metadata: { [key: string]: unknown };
    secret: string;
    subscription_id: string;
    target: string;
  };
  SubscriptionPost: {
    application_id: string;
    description?: string;
    event_types: string[];
    is_enabled: boolean;
    label_key: string;
    label_value: string;
    metadata: { [key: string]: unknown };
    target: string;
  };
}

export interface operations {
  "applicationSecrets.read": {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ApplicationSecret"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "applicationSecrets.create": {
    parameters: {
      body: {
        body: definitions["ApplicationSecretPost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["ApplicationSecret"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "applicationSecrets.update": {
    parameters: {
      path: {
        application_secret_token: string;
      };
      body: {
        body: definitions["ApplicationSecretPost"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ApplicationSecret"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "applicationSecrets.delete": {
    parameters: {
      path: {
        application_secret_token: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "applications.list": {
    parameters: {
      query: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Application"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** An application emit events that are consumed by customers through webhooks */
  "applications.create": {
    parameters: {
      body: {
        body: definitions["ApplicationPost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["Application"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** An application emit events that are consumed by customers through webhooks */
  "applications.get": {
    parameters: {
      path: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Application"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Change the name of an application */
  "applications.update": {
    parameters: {
      path: {
        application_id: string;
      };
      body: {
        body: definitions["ApplicationPost"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Application"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Delete an application, further events won't be sent, active webhook subscriptions will also be deleted. */
  "applications.delete": {
    parameters: {
      path: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** List of every possible errors that Hook0 can return. Each error is in RFC7807 problem format. */
  "errors.list": {
    responses: {
      /** OK */
      200: {
        schema: definitions["Problem"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "events.ingest": {
    parameters: {
      body: {
        body: definitions["EventPost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["IngestedEvent"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "eventTypes.list": {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["EventType"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "eventTypes.create": {
    parameters: {
      body: {
        body: definitions["EventTypePost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["EventType"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "eventTypes.get": {
    parameters: {
      path: {
        event_type_name: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["EventType"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "eventTypes.delete": {
    parameters: {
      path: {
        event_type_name: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "events.list": {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Event"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "events.get": {
    parameters: {
      path: {
        event_id: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["EventWithPayload"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Get an object that shows how this instance is configured. */
  "instance.get": {
    responses: {
      /** OK */
      200: {
        schema: definitions["InstanceConfig"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "organizations.list": {
    responses: {
      /** OK */
      200: {
        schema: definitions["Organization"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  register: {
    parameters: {
      body: {
        body: definitions["RegistrationPost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["Registration"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "requestAttempts.read": {
    parameters: {
      query: {
        application_id: string;
        event_id?: string;
        subscription_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["RequestAttempt"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** A response is produced when a request attempt is processed */
  "response.get": {
    parameters: {
      query: {
        application_id: string;
      };
      path: {
        response_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Response"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** List all subscriptions created by customers against the application events */
  "subscriptions.list": {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Subscription"][];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** A subscription let your customers subscribe to events. Events will be sent through the defined medium inside the subscription (e.g. HTTP POST request) as a webhook. */
  "subscriptions.create": {
    parameters: {
      body: {
        body: definitions["SubscriptionPost"];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: definitions["Subscription"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "subscriptions.update": {
    parameters: {
      path: {
        subscription_id: string;
      };
      body: {
        body: definitions["SubscriptionPost"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Subscription"];
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  "subscriptions.delete": {
    parameters: {
      path: {
        subscription_id: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
}

export interface external {}
