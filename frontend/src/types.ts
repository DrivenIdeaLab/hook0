/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/application_secrets/': {
    get: operations['applicationSecrets.read'];
    post: operations['applicationSecrets.create'];
  };
  '/api/v1/application_secrets/{application_secret_token}': {
    put: operations['applicationSecrets.update'];
    delete: operations['applicationSecrets.delete'];
  };
  '/api/v1/applications/': {
    get: operations['applications.list'];
    /** An application emit events that are consumed by customers through webhooks */
    post: operations['applications.create'];
  };
  '/api/v1/applications/{application_id}': {
    /** An application emit events that are consumed by customers through webhooks */
    get: operations['applications.get'];
    /** Change the name of an application */
    put: operations['applications.update'];
    /** Delete an application, further events won't be sent, active webhook subscriptions will also be deleted. */
    delete: operations['applications.delete'];
  };
  '/api/v1/errors/': {
    /** List of every possible errors that Hook0 can return. Each error is in RFC7807 problem format. */
    get: operations['errors.list'];
  };
  '/api/v1/event/': {
    post: operations['events.ingest'];
  };
  '/api/v1/event_types/': {
    get: operations['eventTypes.list'];
    post: operations['eventTypes.create'];
  };
  '/api/v1/event_types/{event_type_name}': {
    get: operations['eventTypes.get'];
    delete: operations['eventTypes.delete'];
  };
  '/api/v1/events/': {
    get: operations['events.list'];
  };
  '/api/v1/events/{event_id}': {
    get: operations['events.get'];
  };
  '/api/v1/instance/': {
    /** Get an object that shows how this instance is configured. */
    get: operations['instance.get'];
  };
  '/api/v1/organizations/': {
    get: operations['organizations.list'];
    /** Note that you will need to regenerate a JWT to be able to see/use the newly created organization. */
    post: operations['organizations.create'];
  };
  '/api/v1/organizations/{organization_id}/': {
    get: operations['organizations.get'];
    /** Note that you will need to regenerate a JWT to be able to see the updated name of the organization. */
    put: operations['organizations.edit'];
    /** Note that you will need to regenerate a JWT to be able to make the deleted organization go away. */
    delete: operations['organizations.delete'];
  };
  '/api/v1/organizations/{organization_id}/invite': {
    put: operations['organizations.invite'];
    delete: operations['organizations.revoke'];
  };
  '/api/v1/payload_content_types/': {
    /** List of every possible content types that can be used in event payloads. */
    get: operations['payload_content_types.list'];
  };
  '/api/v1/register/': {
    post: operations['register'];
  };
  '/api/v1/request_attempts/': {
    get: operations['requestAttempts.read'];
  };
  '/api/v1/responses/{response_id}': {
    /** A response is produced when a request attempt is processed */
    get: operations['response.get'];
  };
  '/api/v1/subscriptions/': {
    /** List all subscriptions created by customers against the application events */
    get: operations['subscriptions.list'];
    /** A subscription let your customers subscribe to events. Events will be sent through the defined medium inside the subscription (e.g. HTTP POST request) as a webhook. */
    post: operations['subscriptions.create'];
  };
  '/api/v1/subscriptions/{subscription_id}': {
    get: operations['subscriptions.get'];
    put: operations['subscriptions.update'];
    delete: operations['subscriptions.delete'];
  };
}

export interface components {
  schemas: {
    Application: {
      /** Format: uuid */
      application_id: string;
      name: string;
      /** Format: uuid */
      organization_id: string;
    };
    ApplicationPost: {
      name: string;
      /** Format: uuid */
      organization_id: string;
    };
    ApplicationSecret: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      deleted_at?: string;
      name?: string;
      /** Format: uuid */
      token: string;
    };
    ApplicationSecretPost: {
      /** Format: uuid */
      application_id: string;
      name?: string;
    };
    Event: {
      /** Format: uuid */
      application_secret_token: string;
      /** Format: uuid */
      event_id: string;
      event_type_name: string;
      ip: string;
      labels: { [key: string]: unknown };
      metadata?: { [key: string]: unknown };
      /** Format: date-time */
      occurred_at: string;
      payload_content_type: string;
      /** Format: date-time */
      received_at: string;
    };
    EventPost: {
      /** Format: uuid */
      application_id: string;
      /** Format: uuid */
      event_id: string;
      event_type: string;
      labels: { [key: string]: unknown };
      metadata?: { [key: string]: unknown };
      /** Format: date-time */
      occurred_at: string;
      payload: string;
      payload_content_type: string;
    };
    EventType: {
      event_type_name: string;
      resource_type_name: string;
      service_name: string;
      verb_name: string;
    };
    EventTypePost: {
      /** Format: uuid */
      application_id: string;
      resource_type: string;
      service: string;
      verb: string;
    };
    EventWithPayload: {
      /** Format: uuid */
      application_secret_token: string;
      /** Format: uuid */
      event_id: string;
      event_type_name: string;
      ip: string;
      labels: { [key: string]: unknown };
      metadata?: { [key: string]: unknown };
      /** Format: date-time */
      occurred_at: string;
      payload: string;
      payload_content_type: string;
      /** Format: date-time */
      received_at: string;
    };
    IngestedEvent: {
      /** Format: uuid */
      application_id: string;
      /** Format: uuid */
      event_id: string;
      /** Format: date-time */
      received_at: string;
    };
    InstanceConfig: {
      auto_db_migration: boolean;
      disable_registration: boolean;
      keycloak_front_client_id: string;
      keycloak_realm: string;
      keycloak_url: string;
    };
    Organization: {
      name: string;
      /** Format: uuid */
      organization_id: string;
      role: string;
    };
    OrganizationInfo: {
      name: string;
      /** Format: uuid */
      organization_id: string;
      users: {
        email: string;
        first_name: string;
        last_name: string;
        role: string;
        /** Format: uuid */
        user_id: string;
      }[];
    };
    OrganizationPost: {
      name: string;
    };
    Problem: {
      detail: string;
      id: string;
      /** Format: int32 */
      status: number;
      title: string;
    };
    Registration: {
      /** Format: uuid */
      organization_id: string;
      temporary_password: string;
      /** Format: uuid */
      user_id: string;
    };
    RegistrationPost: {
      email: string;
      first_name: string;
      last_name: string;
      organization_name: string;
    };
    RequestAttempt: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      delay_until?: string;
      /** Format: uuid */
      event_id: string;
      /** Format: date-time */
      failed_at?: string;
      /** Format: date-time */
      picked_at?: string;
      /** Format: uuid */
      request_attempt_id: string;
      /** Format: uuid */
      response_id?: string;
      /** Format: int32 */
      retry_count: number;
      status: string;
      subscription: {
        description?: string;
        /** Format: uuid */
        subscription_id: string;
      };
      /** Format: date-time */
      succeeded_at?: string;
    };
    Response: {
      body?: string;
      /** Format: int32 */
      elapsed_time_ms?: number;
      headers?: { [key: string]: unknown };
      /** Format: int32 */
      http_code?: number;
      response_error_name?: string;
      /** Format: uuid */
      response_id: string;
    };
    Revoke: {
      /** Format: uuid */
      user_id: string;
    };
    Subscription: {
      /** Format: uuid */
      application_id: string;
      /** Format: date-time */
      created_at: string;
      description?: string;
      event_types: string[];
      is_enabled: boolean;
      label_key: string;
      label_value: string;
      metadata: { [key: string]: unknown };
      /** Format: uuid */
      secret: string;
      /** Format: uuid */
      subscription_id: string;
      target: string;
    };
    SubscriptionPost: {
      /** Format: uuid */
      application_id: string;
      description?: string;
      event_types: string[];
      is_enabled: boolean;
      label_key: string;
      label_value: string;
      metadata?: { [key: string]: unknown };
      target: string;
    };
    UserInvitation: {
      email: string;
      role: string;
    };
  };
}

export interface operations {
  'applicationSecrets.read': {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ApplicationSecret'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'applicationSecrets.create': {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['ApplicationSecret'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicationSecretPost'];
      };
    };
  };
  'applicationSecrets.update': {
    parameters: {
      path: {
        application_secret_token: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ApplicationSecret'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicationSecretPost'];
      };
    };
  };
  'applicationSecrets.delete': {
    parameters: {
      path: {
        application_secret_token: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'applications.list': {
    parameters: {
      query: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Application'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** An application emit events that are consumed by customers through webhooks */
  'applications.create': {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['Application'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicationPost'];
      };
    };
  };
  /** An application emit events that are consumed by customers through webhooks */
  'applications.get': {
    parameters: {
      path: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Application'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Change the name of an application */
  'applications.update': {
    parameters: {
      path: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Application'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicationPost'];
      };
    };
  };
  /** Delete an application, further events won't be sent, active webhook subscriptions will also be deleted. */
  'applications.delete': {
    parameters: {
      path: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** List of every possible errors that Hook0 can return. Each error is in RFC7807 problem format. */
  'errors.list': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Problem'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'events.ingest': {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['IngestedEvent'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EventPost'];
      };
    };
  };
  'eventTypes.list': {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['EventType'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'eventTypes.create': {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['EventType'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EventTypePost'];
      };
    };
  };
  'eventTypes.get': {
    parameters: {
      path: {
        event_type_name: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['EventType'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'eventTypes.delete': {
    parameters: {
      path: {
        event_type_name: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'events.list': {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Event'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'events.get': {
    parameters: {
      path: {
        event_id: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['EventWithPayload'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Get an object that shows how this instance is configured. */
  'instance.get': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InstanceConfig'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'organizations.list': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Organization'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Note that you will need to regenerate a JWT to be able to see/use the newly created organization. */
  'organizations.create': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OrganizationInfo'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationPost'];
      };
    };
  };
  'organizations.get': {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OrganizationInfo'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Note that you will need to regenerate a JWT to be able to see the updated name of the organization. */
  'organizations.edit': {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OrganizationInfo'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationPost'];
      };
    };
  };
  /** Note that you will need to regenerate a JWT to be able to make the deleted organization go away. */
  'organizations.delete': {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'organizations.invite': {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserInvitation'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserInvitation'];
      };
    };
  };
  'organizations.revoke': {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Revoke'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Revoke'];
      };
    };
  };
  /** List of every possible content types that can be used in event payloads. */
  'payload_content_types.list': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  register: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['Registration'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegistrationPost'];
      };
    };
  };
  'requestAttempts.read': {
    parameters: {
      query: {
        application_id: string;
        event_id?: string;
        subscription_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['RequestAttempt'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** A response is produced when a request attempt is processed */
  'response.get': {
    parameters: {
      query: {
        application_id: string;
      };
      path: {
        response_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** List all subscriptions created by customers against the application events */
  'subscriptions.list': {
    parameters: {
      query: {
        application_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Subscription'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** A subscription let your customers subscribe to events. Events will be sent through the defined medium inside the subscription (e.g. HTTP POST request) as a webhook. */
  'subscriptions.create': {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['Subscription'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionPost'];
      };
    };
  };
  'subscriptions.get': {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Subscription'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  'subscriptions.update': {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Subscription'];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionPost'];
      };
    };
  };
  'subscriptions.delete': {
    parameters: {
      path: {
        subscription_id: string;
      };
      query: {
        application_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Conflict */
      409: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
}

export interface external {}
